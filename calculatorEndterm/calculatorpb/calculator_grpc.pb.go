// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculateServiceClient is the client API for CalculateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculateServiceClient interface {
	CalculateManyTimes(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (CalculateService_CalculateManyTimesClient, error)
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalculateService_ComputeAverageClient, error)
}

type calculateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateServiceClient(cc grpc.ClientConnInterface) CalculateServiceClient {
	return &calculateServiceClient{cc}
}

func (c *calculateServiceClient) CalculateManyTimes(ctx context.Context, in *CalculatorRequest, opts ...grpc.CallOption) (CalculateService_CalculateManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculateService_ServiceDesc.Streams[0], "/calculatorEndterm.CalculateService/CalculateManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculateServiceCalculateManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculateService_CalculateManyTimesClient interface {
	Recv() (*CalculatorResponse, error)
	grpc.ClientStream
}

type calculateServiceCalculateManyTimesClient struct {
	grpc.ClientStream
}

func (x *calculateServiceCalculateManyTimesClient) Recv() (*CalculatorResponse, error) {
	m := new(CalculatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculateServiceClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (CalculateService_ComputeAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculateService_ServiceDesc.Streams[1], "/calculatorEndterm.CalculateService/ComputeAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculateServiceComputeAverageClient{stream}
	return x, nil
}

type CalculateService_ComputeAverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type calculateServiceComputeAverageClient struct {
	grpc.ClientStream
}

func (x *calculateServiceComputeAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculateServiceComputeAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateServiceServer is the server API for CalculateService service.
// All implementations must embed UnimplementedCalculateServiceServer
// for forward compatibility
type CalculateServiceServer interface {
	CalculateManyTimes(*CalculatorRequest, CalculateService_CalculateManyTimesServer) error
	ComputeAverage(CalculateService_ComputeAverageServer) error
	mustEmbedUnimplementedCalculateServiceServer()
}

// UnimplementedCalculateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculateServiceServer struct {
}

func (UnimplementedCalculateServiceServer) CalculateManyTimes(*CalculatorRequest, CalculateService_CalculateManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateManyTimes not implemented")
}
func (UnimplementedCalculateServiceServer) ComputeAverage(CalculateService_ComputeAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}
func (UnimplementedCalculateServiceServer) mustEmbedUnimplementedCalculateServiceServer() {}

// UnsafeCalculateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculateServiceServer will
// result in compilation errors.
type UnsafeCalculateServiceServer interface {
	mustEmbedUnimplementedCalculateServiceServer()
}

func RegisterCalculateServiceServer(s grpc.ServiceRegistrar, srv CalculateServiceServer) {
	s.RegisterService(&CalculateService_ServiceDesc, srv)
}

func _CalculateService_CalculateManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CalculatorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculateServiceServer).CalculateManyTimes(m, &calculateServiceCalculateManyTimesServer{stream})
}

type CalculateService_CalculateManyTimesServer interface {
	Send(*CalculatorResponse) error
	grpc.ServerStream
}

type calculateServiceCalculateManyTimesServer struct {
	grpc.ServerStream
}

func (x *calculateServiceCalculateManyTimesServer) Send(m *CalculatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculateService_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculateServiceServer).ComputeAverage(&calculateServiceComputeAverageServer{stream})
}

type CalculateService_ComputeAverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type calculateServiceComputeAverageServer struct {
	grpc.ServerStream
}

func (x *calculateServiceComputeAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculateServiceComputeAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateService_ServiceDesc is the grpc.ServiceDesc for CalculateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculatorEndterm.CalculateService",
	HandlerType: (*CalculateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateManyTimes",
			Handler:       _CalculateService_CalculateManyTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAverage",
			Handler:       _CalculateService_ComputeAverage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "calculatorEndterm/calculatorpb/calculator.proto",
}
